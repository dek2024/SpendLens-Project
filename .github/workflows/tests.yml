name: Tests and Coverage

# Trigger this workflow on push to any branch and on pull requests
on:
  push:
    branches: [ main, master, develop, "**" ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    # Step 1: Define the runner environment
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
      # Step 2: Checkout repository code
      - name: üì• Checkout repository
        uses: actions/checkout@v4
      
      # Step 3: Set up Python environment
      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      # Step 4: Display Python version
      - name: üìã Display Python version
        run: |
          python --version
          pip --version
      
      # Step 5: Install dependencies from requirements.txt
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Step 6: Run pytest with coverage reporting
      - name: üß™ Run tests with coverage
        run: |
          pytest tests/test_logic.py -v \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=85
      
      # Step 7: Display coverage summary
      - name: üìä Coverage Summary
        if: always()
        run: |
          echo "================================"
          echo "üìä Test Coverage Summary"
          echo "================================"
          coverage report --skip-covered
      
      # Step 8: Upload coverage to Codecov (optional)
      - name: üì§ Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: spendlens-coverage
          fail_ci_if_error: false
        continue-on-error: true
      
      # Step 9: Generate coverage badge data
      - name: üèÖ Generate coverage badge
        if: success()
        run: |
          COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
          echo "Coverage: ${COVERAGE}%"
          
          # Create badge color based on coverage
          if [ $(echo "$COVERAGE >= 90" | bc) -eq 1 ]; then
            echo "BADGE_COLOR=brightgreen" >> $GITHUB_ENV
          elif [ $(echo "$COVERAGE >= 85" | bc) -eq 1 ]; then
            echo "BADGE_COLOR=green" >> $GITHUB_ENV
          elif [ $(echo "$COVERAGE >= 75" | bc) -eq 1 ]; then
            echo "BADGE_COLOR=yellow" >> $GITHUB_ENV
          else
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
          fi
      
      # Step 10: Test execution summary
      - name: ‚úÖ Test Summary
        if: always()
        run: |
          echo "================================"
          echo "‚úÖ Test Execution Complete"
          echo "================================"
          echo "Python Version: ${{ matrix.python-version }}"
          echo "OS: ubuntu-latest"
          echo "Coverage Threshold: ‚â•85%"
          if [ "${{ job.status }}" == "success" ]; then
            echo "Status: PASSED ‚úÖ"
          else
            echo "Status: FAILED ‚ùå"
          fi
